version: '3.8'

services:
  messanger:
    container_name: messanger
    build:
      context: .
      dockerfile: Dockerfile
    command: ["./messanger", "-config", "./prod.yaml"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 50001:50001
      - 50002:50002
    environment:
      - DB_PASSWORD=password

  postgres:
    container_name: postgres
    restart: always
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  migrations:
    container_name: migrations
    image: migrate/migrate:latest
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: [ "migrate" ]
    command: [
      "-path", "/migrations",
      "-database", "postgres://postgres:password@postgres:5432/postgres?sslmode=disable",
      "up"
    ]
    volumes:
      - ./migrations:/migrations
    networks:
      - default

  redis:
    container_name: redis
    restart: always
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  prometheus:
    image: prom/prometheus:v2.45.3
    container_name: prometheus
    ports:
      - "9090:9090"
    depends_on:
      - messanger
    volumes:
      - "./build/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      
  grafana:
    image: grafana/grafana:10.2.4
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - "./build/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml"
      - "./build/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml"
      - "./build/grafana/dahboards:/etc/grafana/provisioning/dashboards"

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      # Определяем три листенера: внешний для хост-машины, внутренний для контейнеров и контроллер
      - KAFKA_CFG_LISTENERS=EXTERNAL://0.0.0.0:9092,INTERNAL://0.0.0.0:9093,CONTROLLER://0.0.0.0:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      # Объявляем рекламируемые адреса для каждого листенера
      - KAFKA_CFG_ADVERTISED_LISTENERS=EXTERNAL://localhost:9092,INTERNAL://kafka:9093
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9094
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Устанавливаем имя inter.broker.listener.name, которое должно совпадать с одним из имен в advertised.listeners
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      # Включаем автоматическое создание топиков
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 3s


  kafka-ui:
    image: 'obsidiandynamics/kafdrop:latest'
    container_name: kafka-ui
    ports:
      - "9000:9000"
    environment:
      # Используем внутренний адрес Kafka для подключения
      - KAFKA_BROKERCONNECT=kafka:9093