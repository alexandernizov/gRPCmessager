// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/alexandernizov/grpcmessanger/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthStorage is an autogenerated mock type for the AuthStorage type
type AuthStorage struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *AuthStorage) CreateUser(ctx context.Context, user domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (*domain.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) *domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: ctx, userUuid
func (_m *AuthStorage) GetRefreshToken(ctx context.Context, userUuid uuid.UUID) (string, error) {
	ret := _m.Called(ctx, userUuid)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, userUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, userUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *AuthStorage) GetUserByLogin(ctx context.Context, login string) (*domain.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUuid provides a mock function with given fields: ctx, _a1
func (_m *AuthStorage) GetUserByUuid(ctx context.Context, _a1 uuid.UUID) (*domain.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertRefreshToken provides a mock function with given fields: ctx, userUuid, refreshToken
func (_m *AuthStorage) UpsertRefreshToken(ctx context.Context, userUuid uuid.UUID, refreshToken string) error {
	ret := _m.Called(ctx, userUuid, refreshToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userUuid, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthStorage creates a new instance of AuthStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthStorage(t mockConstructorTestingTNewAuthStorage) *AuthStorage {
	mock := &AuthStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
