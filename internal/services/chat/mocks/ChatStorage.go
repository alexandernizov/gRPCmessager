// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/alexandernizov/grpcmessanger/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ChatStorage is an autogenerated mock type for the ChatStorage type
type ChatStorage struct {
	mock.Mock
}

// ChatsCount provides a mock function with given fields: ctx
func (_m *ChatStorage) ChatsCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChat provides a mock function with given fields: ctx, _a1
func (_m *ChatStorage) CreateChat(ctx context.Context, _a1 domain.Chat) (*domain.Chat, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *domain.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Chat) (*domain.Chat, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Chat) *domain.Chat); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Chat) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChat provides a mock function with given fields: ctx, chatUuid
func (_m *ChatStorage) GetChat(ctx context.Context, chatUuid uuid.UUID) (*domain.Chat, error) {
	ret := _m.Called(ctx, chatUuid)

	var r0 *domain.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Chat, error)); ok {
		return rf(ctx, chatUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Chat); ok {
		r0 = rf(ctx, chatUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, chatUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatHistory provides a mock function with given fields: ctx, chatUuid
func (_m *ChatStorage) GetChatHistory(ctx context.Context, chatUuid uuid.UUID) ([]*domain.Message, error) {
	ret := _m.Called(ctx, chatUuid)

	var r0 []*domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Message, error)); ok {
		return rf(ctx, chatUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Message); ok {
		r0 = rf(ctx, chatUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, chatUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMessage provides a mock function with given fields: ctx, _a1, message
func (_m *ChatStorage) PostMessage(ctx context.Context, _a1 uuid.UUID, message domain.Message) (*domain.Message, error) {
	ret := _m.Called(ctx, _a1, message)

	var r0 *domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.Message) (*domain.Message, error)); ok {
		return rf(ctx, _a1, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.Message) *domain.Message); ok {
		r0 = rf(ctx, _a1, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.Message) error); ok {
		r1 = rf(ctx, _a1, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrimMessages provides a mock function with given fields: ctx, _a1, maximumMessages
func (_m *ChatStorage) TrimMessages(ctx context.Context, _a1 uuid.UUID, maximumMessages int) (bool, error) {
	ret := _m.Called(ctx, _a1, maximumMessages)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) (bool, error)); ok {
		return rf(ctx, _a1, maximumMessages)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) bool); ok {
		r0 = rf(ctx, _a1, maximumMessages)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = rf(ctx, _a1, maximumMessages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatStorage creates a new instance of ChatStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatStorage(t mockConstructorTestingTNewChatStorage) *ChatStorage {
	mock := &ChatStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
