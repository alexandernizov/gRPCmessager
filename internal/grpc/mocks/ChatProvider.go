// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/alexandernizov/grpcmessanger/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ChatProvider is an autogenerated mock type for the ChatProvider type
type ChatProvider struct {
	mock.Mock
}

// ChatHistory provides a mock function with given fields: ctx, chatUuid
func (_m *ChatProvider) ChatHistory(ctx context.Context, chatUuid uuid.UUID) ([]*domain.Message, error) {
	ret := _m.Called(ctx, chatUuid)

	var r0 []*domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Message, error)); ok {
		return rf(ctx, chatUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Message); ok {
		r0 = rf(ctx, chatUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, chatUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChat provides a mock function with given fields: ctx, ownerUuid, readonly, ttl
func (_m *ChatProvider) NewChat(ctx context.Context, ownerUuid uuid.UUID, readonly bool, ttl int) (*domain.Chat, error) {
	ret := _m.Called(ctx, ownerUuid, readonly, ttl)

	var r0 *domain.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, int) (*domain.Chat, error)); ok {
		return rf(ctx, ownerUuid, readonly, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, int) *domain.Chat); ok {
		r0 = rf(ctx, ownerUuid, readonly, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, int) error); ok {
		r1 = rf(ctx, ownerUuid, readonly, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessage provides a mock function with given fields: ctx, chatUuid, authorUuid, message
func (_m *ChatProvider) NewMessage(ctx context.Context, chatUuid uuid.UUID, authorUuid uuid.UUID, message string) (*domain.Message, error) {
	ret := _m.Called(ctx, chatUuid, authorUuid, message)

	var r0 *domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) (*domain.Message, error)); ok {
		return rf(ctx, chatUuid, authorUuid, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) *domain.Message); ok {
		r0 = rf(ctx, chatUuid, authorUuid, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = rf(ctx, chatUuid, authorUuid, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatProvider creates a new instance of ChatProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatProvider(t mockConstructorTestingTNewChatProvider) *ChatProvider {
	mock := &ChatProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
