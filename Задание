Спроектировать gRPC API (и реализовать) простой групповой мессенджер:

Клиент может инициализировать:
 + собственную сессию (получив уникальный UUID)
 + создать чат (тоже с уникальным UUID)
 + любой клиент может отправлять сообщения в чат
 + получать историю сообщений

+ Везде прокинуть context
+ Чат должен храниться in-memory
+ При создании чата можем указать его время жизни (через сколько весь чат будет удален)
+ Для чата можно указать флаг read-only, тогда в чат может писать только создатель этого чата
+ Размер каждого чата ограничен (в логике LRU)
    + Добавить в вывод сообщения UUID, чтобы понимать какое сообщение редактировать
    + Добавить редактирование сообщения, чтобы логика LRU при удалении чата имела какой-то смысл
+ Все методы должны возвращать корректные коды ошибок
+ Должно быть логирование всех реквестов и респонсов
+ Должна быть корректная обработка ошибок и паник
+ При запуске бинарника указываем через флаги:
    + порт
    + максимальный размер одного чата
    + максимальное количество чатов вообще
+ Проект должен соответствовать структуре Go Project Layout
+ У проекта должен быть реализован graceful shutdown

- Проект должен использовать golangci-lint

- Функционал должен быть покрыт тестами

- У проекта должен быть Makefile для:
    - билда
    - запуска тестов
    - запуска линтера
    - код интерфейса сервера должен генерироваться автоматически через go:generate

Дополнительно (*)
- Должен быть билд Docker-образа
- Должно быть аналогичное HTTP API, описанное через формат OpenAPI (spec-first, то есть генерим код по спецификации, а не спецификацию по готовому коду), а бизнес логика - в одном месте с использованием grpc-gateway
- По умолчанию - in-memory, но через флаг --redis --dsn="redis dsn" или --postgres --dsn="postgresql dsn" должен использоваться другой сторадж
- Проект должен быть покрыт Prometheus-метриками
- У проекта должны быть корректные health / ready probes